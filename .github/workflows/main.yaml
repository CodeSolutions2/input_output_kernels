name: run code 

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
    contents: write

jobs:
  job_name:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 
        uses: actions/checkout@v4

      - name: run code
        run: |
          sudo pip install -U tensorflow;
          sudo pip install pillow;
          sudo pip install numpy;
          cat > out.py << EOF
          import os 
          import sys
          from PIL import Image
          import numpy as np
          import requests
          import tensorflow as tf
          # ----------------------
          def fetch_an_image(url, desired_file_name):
            response = requests.get(url)
          
            with open(desired_file_name, 'wb') as file:
                file.write(response.content)
          # ----------------------
          def make_a_3shapeArray_a_4shapeArray(file_name, img_w, img_h):
            
            arr_3shape = np.array(Image.open(file_name).resize((img_w, img_h)))
            print("arr_3shape.shape: ", arr_3shape.shape)
            
            # Remove alpha layer
            arr_3shape = arr_3shape[:, :, 0:3]
            print("arr_3shape.shape: ", arr_3shape.shape)
            
            arr_4shape = np.expand_dims(arr_3shape, axis=0) # (1, img_w, img_h, 4) = (1, width, height, RGB_alpha)
            return arr_4shape
          # ----------------------
          def save_3d_tf_array_to_file(tf_arr, output_fileName):

            # tf_arr shape : (batch_size=1, img_w, img_h)
            
            # Remove batch dimension
            np_arr_2d_float = np.squeeze(tf_arr.numpy()) 
            print('np_arr_2d_float.shape: ', np_arr_2d_float.shape) # (img_w, img_h) 
            
            # Convert to int dtype
            np_arr_2d_int = np.array(np_arr_2d_float, dtype=np.uint8)
            
            # Save image to file
            image_out = Image.fromarray(np_arr_2d_int)
            image_out.save(output_fileName+".png")
          # ----------------------


          # ----------------------

          # ----------------------
          img_w = 224
          img_h = 224
          # ----------------------
          # [0] Fetch the original image
          # ----------------------
          url = 'https://storage.googleapis.com/neural-style-transfer/original/original2.png'
          desired_file_name = "image_to_receive_a_style.png"
          
          # Saves image to file path
          fetch_an_image(url, desired_file_name)
          
          # Read in image and convert to a 4D array
          org_arr_np = make_a_3shapeArray_a_4shapeArray(desired_file_name, img_w, img_h)
          print('np.max(org_arr_np): ', np.max(org_arr_np))
          print('np.min(org_arr_np): ', np.min(org_arr_np))
          # ----------------------
          # [1] Fetch the style image
          # ----------------------
          url = 'https://storage.googleapis.com/neural-style-transfer/style/style0.png'
          desired_file_name = "image_to_give_a_style.png"
          
          # Saves image to file path
          fetch_an_image(url, desired_file_name)
          
          # Read in image and convert to a 4D array
          style_arr_np = make_a_3shapeArray_a_4shapeArray(desired_file_name, img_w, img_h)
          print('np.max(style_arr_np): ', np.max(style_arr_np))
          print('np.min(style_arr_np): ', np.min(style_arr_np))
          # ----------------------
          # [2] Randomly initialize the generated_arr
          # ----------------------
          # tf.Variable is a tensor that does not change type or shape.
          # Add noise to the original image.
          generated_arr_tf = tf.Variable(tf.image.convert_image_dtype(org_arr_np, tf.float32))
          noise_tf = tf.random.uniform(tf.shape(generated_arr_tf), -0.25, 0.25)
          generated_arr_tf = tf.add(generated_arr_tf, noise)
          generated_arr_tf = tf.clip_by_value(generated_arr_tf, clip_value_min=0.0, clip_value_max=1.0)
          
          print('generated_arr_tf.shape: ', generated_arr_tf.shape)    # (1, img_w, img_h, 4)
          # ----------------------
          save_3d_tf_array_to_file(generated_arr_tf, "initial_generated_arr")
          # ----------------------
          EOF
          python out.py;

      - name: Save output files to repo
        run: |
          repoOwner=$(echo "${{ github.repository }}" | cut -d '/' -f 1);
          repoOwnerEmail="j622amilah@gmail.com";
          repoName=$(echo "${{ github.repository }}" | cut -d '/' -f 2);
          git config --global user.email ${repoOwnerEmail};
          git config --global user.name ${repoOwner};
          git remote set-url origin https://git:${GITHUB_TOKEN}@github.com/${repoOwner}/${repoName}.git
          git reset  
          git add /home/runner/work/${repoName}/${repoName}/initial_generated_arr.png
          git commit -m "add output files to repo"
          git push
          
          
