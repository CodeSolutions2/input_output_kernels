var K = 2;
var x = [0, 0, 1, 3];
var y = [0, 1, 1, 0];


// [0] Find the one-norm between all point combinations
var n = x.length;
console.log("n: ", n);

var pt_name = x.map((val, ind) => { return ind; });
console.log("pt_name: ", pt_name);

var pt_indices_arr = [];
var pt_distance_arr = [];

for (var i=0; i<n; i++) {
   for (var j=(i+1); j<n; j++) {
     pt_indices_arr.push([i, j]);
     // console.log("pt_indices_arr: ", pt_indices_arr);

     var one_norm = Math.abs(x.at(i) - x.at(j)) + Math.abs(y.at(i) - y.at(j));
     // console.log("one_norm: ", one_norm);

     pt_distance_arr.push(one_norm);
   }
}
console.log("pt_indices_arr: ", pt_indices_arr);
console.log("pt_distance_arr: ", pt_distance_arr);


var dist_to_Kth_closest_data_pt = [];
var Kth_closest_data_pt = [];

for (var pt=0; pt<n; pt++) {
  console.log("pt: ", pt);

  // Find Kth closest point, per point
  var pt_indices = [];
  var pt_distance = [];
  // var c = 0;
  
  for (var i=0; i<pt_indices_arr.length; i++) {
    var out = [];
    var v = pt_indices_arr.at(i);
    console.log("v: ", v);
    for (var j=0; j<v.length; j++) {
      if (v.at(j) == pt) {out.push(true);}
    }
    console.log("out: ", out);
    out = [... new Set(out)];
    console.log("out: ", out);
    if (out.length > 0) {
      pt_indices.push(v);
      pt_distance.push(pt_distance_arr.at(i));
      // c = c + 1;
    }  
  }

  console.log("pt_indices: ", pt_indices);
  console.log("pt_distance: ", pt_distance);

  var pt_distance_sorted = pt_distance.sort((a, b) => a - b);
  console.log("pt_distance_sorted: ", pt_distance_sorted);
  var pt_distance_sorted_Kth = pt_distance_sorted.at(K-1);
  for (var i=0; i<pt_distance.length; i++) {
    if (pt_distance_sorted_Kth == pt_distance.at(i)) {
      dist_to_Kth_closest_data_pt.push(pt_distance.at(i));
      Kth_closest_data_pt.push(pt_indices.at(i));
    }
  }

}

console.log("dist_to_Kth_closest_data_pt: ", dist_to_Kth_closest_data_pt);
console.log("Kth_closest_data_pt: ", Kth_closest_data_pt);
javascript