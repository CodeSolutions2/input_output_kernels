var arr = [
[0,  7,  9,  0, 0, 14], 
[7,  0, 10, 15, 0, 0], 
[9, 10,  0, 11, 0, 2], 
[0, 15, 11,  0, 6, 0], 
[0,  0,  0,  6, 0, 9], 
[14, 0,  2,  0, 9, 0]];



// -------------------------------


// Inside a webapp function
var start_distances = arr.at(0).filter((x) => x != 0);
var end_distances = arr.at(arr.length-1).filter((x) => x != 0);

var total_paths = [];

for (var i=0; i<start_distances.length; i++) {

  var second_val_row = 0; // this value is used to create the height and width for the new smaller array around the value such that it is on the diagonal (to find a matching diagonal value).
  var last_nonzero_row_val = start_distances.at(i);
  var path = [];
  
  [second_val_row, last_nonzero_row_val, path] = find_edge_distance(second_val_row, last_nonzero_row_val, path);
  console.log("path: ", path);

  total_paths.push(path);
}

console.log("total_paths: ", total_paths);






function find_edge_distance(second_val_row, last_nonzero_row_val, path) {


// --------------------
// Save the current distance
// --------------------
path.push(last_nonzero_row_val);



// --------------------
//  Check for the next distance
// --------------------
// Remove unneeded top rows and last row.
var arr_start_rows = arr.slice(second_val_row, arr.length-2);
console.log("arr_start_rows: ", arr_start_rows);


// [0] Obtain a part of the original array, with respect to val.

// Specify number of columns in the array part.
// Obtain the first row with columns up to last_nonzero_row_val.
var colnums = arr.at(0).length;
var arr_part_first_row = [];
var fl = false;
for (var i=0; i<colnums; i++) {
  if (fl == false){
    arr_part_first_row.push(arr_start_rows.at(0).at(i));
    if (arr_start_rows.at(0).at(i) == last_nonzero_row_val) {fl = true;}
  }
}
console.log("arr_part_first_row: ", arr_part_first_row);


var arr_part_colnum = arr_part_first_row.length;
console.log("arr_part_colnum: ", arr_part_colnum);


// Make a square array where last_nonzero_row_val is at the [top right corner] of the array.
var arr_part = arr_start_rows.map((row, row_count) => { 
  if (row_count < arr_part_colnum) {
    return row.slice(0,arr_part_colnum);
  } else {
    return "";
  }
}).filter((x) => x != "");
console.log("arr_part: ", arr_part);



return [second_val_row, last_nonzero_row_val, path];
}
javascript