var K = 2;
var x = [0, 0, 1, 3];
var y = [0, 1, 1, 0];

// [0] Find the one-norm between all point combinations
var n = x.length;
var pt_str_arr = [];
for (let i=0; i<n; i++) {
  for (let j=(i+1); j<n; j++) {
    var one_norm = Math.abs(x.at(i) - x.at(j)) + Math.abs(y.at(i) - y.at(j));
    pt_str_arr.push(`${one_norm}_${i},${j}`);
  }
}
console.log("pt_str_arr: ", pt_str_arr);

// [1] Find the closest Kth point, to each point.
// And, find the points within the radius of the Kth point, for each point.
var radius_pt = [];
var kth_closest_pt = [];
var kth_distance_pt = [];
var pt_Set = [];

for (let pt=0; pt<n; pt++) {

  // var pt_str = [];
  // for (let i=0; i<pt_str_arr.length; i++) {
  //  var out = [];
  //  for (let j=0; j<2; j++) {
  //    if (Number(pt_str_arr.at(i).split('_').at(1).split(',').at(j)) == pt) {
  //      out.push(true);
  //    }
  //  }
  //  out = [... new Set(out)];
  //  if (out.length > 0) {
  //    pt_st.push(`${pt_str_arr.at(i).split('_').at(0)}_${pt_str_arr.at(i).split('_').at(1).split(',').at(0)},${pt_str_arr.at(i).split('_').at(1).split(',').at(1)}`);
  //  }
  // }
  // OR
  var pt_str = pt_str_arr.map((vi, i) => {
    var out = pt_str_arr.at(i).split('_').at(',').map((vj, j) => { return Number(vj).toString() === pt.toString() ? true : ''; }).filter((x) => x.length > 0);
    console.log("out: ", out);
    return 0;
  });
  console.log("pt_str: ", pt_str);

} 
javascript