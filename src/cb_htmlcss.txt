<!DOCTYPE>
<html>
<head></head>
<body>

<div id="data_display"></div>


<script src="https://cdn.plot.ly/plotly-2.30.0.min.js" charset="utf-8"></script>

<script>

const n = 100;
var f = 1/n; // sampling rate.
var t = Array.from({length:n}, (v,i) => { return i*f; });
var x = t.map((v,i) => { return Math.sin(v); });
// console.log("x: ", x);
// console.log("t: ", t);

const n_longer = 232;
var [x_longer, t_longer] = make_short_arr_long(x, n_longer);
// console.log("x_longer: ", x_longer);
// console.log("t_longer: ", t_longer);



var title_text = "Linear interpolation between points";
var x_text_trace1and2 = "time (t)";
var y_text_trace1and2 = "x";
var trace1 = {x: t, y: x, mode: "lines+markers", type: "line", name: "x"};
var trace2 = {x: t_longer, y: x_longer, mode: "lines+markers", type: "line", name: "x_longer"};
var data = [trace1, trace2];
var layout = {grid: {rows: 1, columns: 1, pattern: "independent"}, title: title_text, xaxis: {title: x_text_trace1and2}, yaxis: {title: y_text_trace1and2}};
Plotly.newPlot("data_display", data, layout);




function make_short_arr_long(x, n_longer) {

  // Standardize x.


  // Make x [have a large amplitude] to reduce residual errors during linear interpolation.
  // [Multiplying by the largeNumber, performing the calculation, dividing by the largeNumber] also has a smoothing/filter effect on the output.
  var largeNumber = 100;
  x = x.map((v,i) => { return v*largeNumber; });

  var n = x.length;
  var t = Array.from({length:n}, (v,i) => { return i*(1/n); });
  
  // number of points to interpolate between existing points.
  var p = Math.floor(n_longer/n);

  var t_longer = [];
  var x_longer = [];

  for (var i=0; i<n-1; i++) {

    var x_cur = x.at(i);
    var x_next = x.at(i+1);
    var t_cur = t.at(i);
    var t_next = t.at(i+1);

    var t_newsamp = (t_next - t_cur)/p;

    // Solve for slope.
    var m = (x_next - x_cur)/(t_next - t_cur);

    var ts = t_cur;
    t_longer.push(t_cur);
    x_longer.push(x_cur);

    for (var j=0; j<(p-1); j++) {
      ts = ts + t_newsamp;
      t_longer.push(ts);
      x_longer.push(m*ts); // y=mx
    }
   
  }
  t_longer.push(t_next);
  x_longer.push(x_next);


  // Remove largeNumber scaling.
  x_longer = x_longer.map((v,i) => { return v/largeNumber; });


  // Remove standardization.


  return [x_longer, t_longer];
}


</script>
</body>
</html>