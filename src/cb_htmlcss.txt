<!DOCTYPE>
<html>
<head></head>
<body>

<button id="run_selection" onclick="run_selection()">Run Selection</button>


<div id="output">


<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest"></script>

<script src="https://cdn.plot.ly/plotly-2.30.0.min.js" charset="utf-8"></script>

<script>

async function run_selection() {

  const n = 200;
  const x_max = 1;

  var x = Array.from({length: n}, (v,i) => { return (x_max/n)* i; });

  var xs = x.map((v,i) => { return [1*Math.sin(v), 2*Math.cos(v), 5*Math.sin(v)]; });
  const rows = xs.length;
  const cols = xs.at(0).length;

  var ys = Array.from({length: n}, (v,i) => { return (i < n/2) ? 0 : 1; });

  const batch_size = 1;
  const epochs = 200;

  const model = await lstm_model(batch_size, rows, cols);
  document.getElementById("output").innerHTML += "model: "+model+"<br>";

  model.compile({optimizer: tf.train.adam(), loss: tf.losses.meanSquaredError, metrics: ["mse"] })

  const history = model.fit(tf.tensor(xs, [n,3]), tf.tensor(ys), {
    batchSize: batch_size,
    epochs: epochs,
    callbacks: {onEpochEnd: (epoch, logs) => {
      if (epoch % 100 == 0) {
        document.getElementById("output").innerHTML += "epoch: "+epoch+"<br>";
      }
    }}
  });

  // const result = model.predict( 

}




async function lstm_model(batch_size, rows, cols) {

  // Layer 0
  const input = tf.input({batchShape: [batch_size, rows, cols]});

  // Layer 1
  const lstm0 = tf.layers.lstm({
    recurrentActivation: "hardSigmoid",
    units: 32,
    returnSequences: true,
    returnState: false,
    kernelInitializer: "heNormal",
    batchSize: batch_size,
    inputShape: [rows, cols],
    activation: "tanh", 
    trainable: true, 
    dropout: 0.2
})

const input_lstm0 = lstm0.apply(input);

// Layer 2
var attSoftmax = tf.layers.activation({activation: "softmax"})

// Layer 3
const attDot_product = tf.layers.dot({axes: -1})

// Layer 4
const dense0 = tf.layers.dense({units: 1})

const output = dense0.apply(attDot_product.apply([attSoftmax.apply(input_lstm0), input_lstm0]))

const model = tf.model({inputs: input, outputs: output})

return model;
}


</script>
</body>
</html>