<!DOCTYPE html>
<html>
<head></head>
<body>


<div id="data_display"></div>

<style>
div#data_display {position: absolute; vertical-align: top; top: 200; z-index: 200; }
</style>


<script src="https://cdn.plot.ly/plotly-2.30.0.min.js" charset="utf-8"></script>


<script>


const n = 100;

// Assume that samp0 is normally distributed.
var x = Array.from({length: n}, (v,i) => {return i-(n/2);});
const A = 1;
const b = 0; // peak with respect to x
const c = 5; // spread of downward bell curve
var samp0 = x.map((v,i) => { return A*Math.exp(-Math.pow(v-b,2)/(2*Math.pow(c,2))) });
console.log("samp0: ", samp0);

var pdf0 = one_sample_PDF_way0(samp0);
console.log("pdf0: ", pdf0);

// pdf0 with [no negative] x values.
const min_val = samp0.sort().at(0);
var samp0_nonNeg = samp0.map((v,i) => { return v+min_val; });
var pdf0_nonNeg = one_sample_PDF_way0(samp0_nonNeg);
console.log("pdf0_nonNeg: ", pdf0_nonNeg);


var cdf0 = one_sample_CDF_numerical(pdf0);
console.log("cdf0: ", cdf0);


var cdf1 = one_sample_CDF_equation(samp0);
console.log("cdf1: ", cdf1);


var pdf1 = one_sample_PDF_way1(cdf0);
console.log("pdf1: ", pdf1);


// https://plotly.com/javascript/line-charts/
var title_text = "samp0";
var x_text_trace1and2 = "x";
var y_text_trace1and2 = "y";
var trace1 = {x: x, y: samp0, mode: 'lines+markers', type: 'line', name: "samp0"};
var trace2 = {x: x, y: pdf0, mode: 'lines+markers', type: 'line', name: "pdf0"};
var trace3 = {x: x, y: pdf0_nonNeg, mode: 'lines+markers', type: 'line', name: "pdf0_nonNeg"};
var trace4 = {x: x, y: cdf0, mode: 'lines+markers', type: 'line', name: "cdf0"};
var trace5 = {x: x, y: pdf1, mode: 'lines+markers', type: 'line', name: "pdf1"};
var trace6 = {x: x, y: cdf1, mode: 'lines+markers', type: 'line', name: "cdf1"};

var data = [trace1, trace2, trace3, trace4, trace5, trace6];
var layout = {grid: {rows: 1, columns: 1, pattern: 'independent'}, title: title_text, xaxis: {title: x_text_trace1and2}, yaxis: {title: y_text_trace1and2}};
Plotly.newPlot('data_display', data, layout);


// ---------------
// Subfunctions
// ---------------
function one_sample_PDF_way0(x) {

  var x_avg = x.reduce((accumulator, currentValue) => accumulator + currentValue, 0) / x.length;
  const x_variance = x.reduce((accumulator, currentValue) => accumulator + Math.pow(currentValue - x_avg, 2), 0) / x.length;
  const x_standardD = Math.sqrt( x_variance );

  var coef = 1/(Math.sqrt(2*Math.PI)*x_standardD);
  var pdf = x.map((v,i) => { return coef*Math.exp(-Math.pow(v-x_avg,2)/(2*x_variance)); });
  // console.log("pdf: ", pdf);
  return pdf;
}


function one_sample_PDF_way1(cdf) {

  var cdf_avg = cdf.reduce((acc, cur) => acc+cur, 0) / cdf.length;
  var cdf_variance = cdf.reduce((acc, cur) => acc+Math.pow(cur-cdf_avg, 2));
  var cdf_standardD = Math.sqrt(cdf_variance);

  var pdf = cdf.map((val, ind) => {
    var part0 = 1/(Math.sqrt(2*Math.PI)*cdf_standardD);
    
    var part1 = Math.exp(-Math.pow(val-cdf_avg,2)/(2*Math.pow(cdf_standardD,2)));
    return part0*part1;
  });
  return pdf;
}


function one_sample_CDF_numerical(pdf) {

  // "Stack up" [pdf value] per [integer interval]
  var cdf = [];
  var tot = 0;
  for (var i=0; i<pdf.length; i++) {
    tot = tot + pdf.at(i);
    cdf.push(tot);
  }
  return cdf;
}


function one_sample_CDF_equation(x) {
  
  var x_avg = x.reduce((accumulator, currentValue) => accumulator + currentValue, 0) / x.length;
  const x_variance = x.reduce((accumulator, currentValue) => accumulator + Math.pow(currentValue - x_avg, 2), 0) / x.length;
  const x_standardD = Math.sqrt( x_variance );

  var arr = x.map((v,i) => { return (v-x_avg)/(x_standardD*Math.sqrt(2)); });
  //console.log("arr: ", arr);
   
  // Way 0: return a scalar
  function erf(arr) {
    return (2/Math.sqrt(Math.PI))*arr.reduce((a,c) => a+Math.exp(-Math.pow(c,2)));
  }
  // OR
  // Way 1: cut x into bin=1, and perform numerical integral per bin.
  function erf1(arr) {
    var coef = 2/Math.sqrt(Math.PI);
    return arr.map((v,i) => { return coef*Math.exp(-Math.pow(v,2)); });
  }
  // OR
  // Way 2: find the equation of the intergral
  //console.log("erf(arr): ", erf(arr))
  //console.log("erf1(arr): ", erf1(arr))

  
  var cdf = erf1(arr).map((v,i) => { return (1/2)*(1 + v); });
  
return cdf;
}


function two_sample_CDF(arr0, arr1) {

  // Calculate the two-sample CDF (Cumulative Density Function).

  var arr0_avg = arr0.reduce((acc, cur) => acc+cur, 0)/arr0.length;
  var arr0_variance = arr0.reduce((acc, cur) => acc+Math.pow(cur-arr0_avg, 2));
  var arr0_standardD = Math.sqrt(arr0_variance);

  var arr1_avg = arr1.reduce((acc, cur) => acc+cur, 0)/arr1.length;
  var arr1_variance = arr1.reduce((acc, cur) => acc+Math.pow(cur-arr1_avg, 2));
  var arr1_standardD = Math.sqrt(arr1_variance);

  var den0 = Math.pow(arr0_standardD,2)/arr0.length;
  var den1 = Math.pow(arr1_standardD,2)/arr1.length;
  var cdf = arr0.map((val, ind) => { 
    var part0 = val - arr1.at(ind);
    var part1= arr0_avg - arr1_avg;
    return (part0 - part1)/Math.sqrt(den0+den1); 
  });
  console.log("cdf: ", cdf);

  var cdf_avg = cdf.reduce((acc, cur) => acc+cur, 0) / cdf.length;
  var cdf_variance = cdf.reduce((acc, cur) => acc+Math.pow(cur-cdf_avg, 2));
  var cdf_standardD = Math.sqrt(cdf_variance);

  return [cdf, cdf_avg, cdf_variance, cdf_standardD];
}


</script>
</body>
</html>