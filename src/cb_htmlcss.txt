<!DOCTYPE html>
<html>
<head></head>
<body>

<input id="url" type="text" value="" placeholder="url" rows="10" cols="100" style="display:block; text-align: left; width: 600px;">

<input id="ys_selected_ColNum" type="text" value="" placeholder="Enter the ys column number (0-n)" rows="10" cols="100" style="display:block; text-align: left; width: 600px;">

<button id="run_selection" onclick="run_selection()">run_selection</button>

<div id="output">


<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>

<script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/knn-classifier"></script>


<script>



async function run_selection() {

  // [0] Obtain text data.
  const url = document.getElementById('url').value;
  const ys_selected_ColNum = [Number(document.getElementById('ys_selected_ColNum').value)];

  const data_str = await call_fetch_method(url);

  const headerORnot = "no_header";
  var [xs, ys] = await parse_text_to_array(data_str, ys_selected_ColNum, headerORnot);	
  document.getElementById("output").innerHTML += "xs and ys row sample: "+xs.at(0).toString()+ys.at(0).toString();
  document.getElementById("output").innerHTML += "<br>";

  document.getElementById("output").innerHTML += "xs.length: "+xs.length.toString();
  document.getElementById("output").innerHTML += "<br>";


  // Remove a '.' in xs, except for separating sentences.
  const text = xs.map((sen, i) => { 
     var out = sen.split('').find((ele) => { ele == '.' });
    // console.log("out: ", out);
     return (out != '') ? sen.split('.').join(' ') : sen; 
}).join('.');
// console.log("text: ", text);
  document.getElementById("output").innerHTML += "text slice: "+text.slice(0, 20).toString();
  document.getElementById("output").innerHTML += "<br>";

  // [1] Transform xs to a numbered count array.
  const X = await CountVectorization(text);
  document.getElementById("output").innerHTML += "X row sample: "+X.at(0).toString();
  document.getElementById("output").innerHTML += "<br>";

  // [2] Train an ML model.
  // const result_js1 = await ML_KNN(X, ys);
  // document.getElementById("output").innerHTML += "+result_js1: "+result_js1;
  // document.getElementById("output").innerHTML += "<br>";
  
  // [3] Train a DL model.


}

async function CountVectorization(text) {

  var sentences = await text.split('.').filter((x) => x != "");
  document.getElementById("output").innerHTML += "sentences: "+sentences;
  document.getElementById("output").innerHTML += "<br>";


  // Remove stopwords from sentences.
  var stopwords = ["and", "is", "the", "of", "to"];
  sentences = await sentences.map((sval, sind) => {
    sval = sval.toLowerCase().split(' ').map((val, ind) => {
      var temp = val;
      for (var i=0; i<stopwords.length; i++){
        if (val == stopwords.at(i)) { temp = ''; }
      }
      return temp;
    }).filter((x) => x != "");
    return sval.join(" ");
  });
  document.getElementById("output").innerHTML += "remove stopwords - sentences: "+sentences;
  document.getElementById("output").innerHTML += "<br>";

  // Obtain unique words 
  var words = await sentences.map((val, ind) => { return val.split(" "); }).flat(Infinity).filter((x) => x != "");
  words = await [... new Set(words)];
  document.getElementById("output").innerHTML += "words: "+words;
  document.getElementById("output").innerHTML += "<br>";

  // Create count matrix
  var X = []; // size [sentences.length, words.length]
  for (var i=0; i<sentences.length; i++){
    document.getElementById("output").innerHTML += "i: "+i;
    document.getElementById("output").innerHTML += "<br>";
    var words_per_sentence_arr = sentences.at(i).split(" ");

    // Make a vector of zeros [colnum,] for filling-in each row (ie: sentence) of X.
    var values = words.map((val, ind) => { return 0; });

    // Count the repeating words per sentence.
    const words_per_sentence_arr_uq = [... new Set(words_per_sentence_arr)];
    for (var j=0; j<words_per_sentence_arr_uq.length; j++) {
      const word_frequency_sum = words_per_sentence_arr.map((val, ind) => { return (words_per_sentence_arr_uq.at(j) == val) ? 1 : 0; }).reduce((acc, cur) => acc+cur, 0);
      // Look-up the [unique word per sentence] in the [unique words] list.
      // Insert the word_frequency_sum in the [unique words] list column.
      const ii = words.findIndex((x) => x == words_per_sentence_arr_uq.at(j));
      values[ii] = values.at(ii) + word_frequency_sum;
    } // end of for loop words_per_sentence_arr_uq.length
    document.getElementById("output").innerHTML += "values: "+values;
    document.getElementById("output").innerHTML += "<br>";
    X.push(values);
  } // end of for loop sentences.length

  document.getElementById("output").innerHTML += "X: "+X;
  document.getElementById("output").innerHTML += "<br>";

document.getElementById("output").innerHTML += "X rows: "+X.length;
  document.getElementById("output").innerHTML += "<br>";

document.getElementById("output").innerHTML += "X cols: "+X.at(0).length;
  document.getElementById("output").innerHTML += "<br>";

  return X;
} // end of CountVectorization 

async function ML_KNN(xs, ys) {

  // Create a KNN model
  const row = xs.length;

  const classifier = knnClassifier.create();

  document.getElementById("output").innerHTML += "classifier: "+classifier;
  document.getElementById("output").innerHTML += "<br>";

  for (var i=0; i<row; i++) {
    classifier.addExample(tf.tensor(xs.at(i)), ys.at(i));
  }

  document.getElementById("output").innerHTML += "finished adding samples";
  document.getElementById("output").innerHTML += "<br>";

  const index = Number(Math.floor(Math.random()*row));
  document.getElementById("output").innerHTML += "index: "+index;
  document.getElementById("output").innerHTML += "<br>";

  const test_input = xs.at(index);
  document.getElementById("output").innerHTML += "test_input: "+test_input;
  document.getElementById("output").innerHTML += "<br>";

  const result = await classifier.predictClass(tf.tensor(test_input));
  document.getElementById("output").innerHTML += "result: "+result;
  document.getElementById("output").innerHTML += "<br>";

  const result_js1 = await JSON.stringify(result);
  // document.getElementById("output").innerHTML += "result1: "+result_js1;
  // document.getElementById("output").innerHTML += "<br>";

  // const out = await classifier.getClassExampleCount();
  // document.getElementById("output").innerHTML += "Count of classes for model: "+JSON.stringify(out);
  // document.getElementById("output").innerHTML += "<br>";

  return result_js1;

} // end of ML_KNN
  
// -----------------------------------------------

async function call_fetch_method(url) {
	
	const CORS_method_list = ["jQuery_csv_GET", "fetch_csv_GET"];
	
	var response = undefined;
		
	for (var i=0; i<CORS_method_list.length; i++) {
		try {
			if (i == 0) {
				response = await fetch_csv_GET(url);
			} else {
				response = await jQuery_csv_GET(url);
			}
			
		} catch (error) {
			console.log("error: ", error);
		}
		if (response != undefined) {
			break;
		}
	}
	return response;
}

// -----------------------------------------------

async function fetch_csv_GET(url) {
	
	var headers = {
		"Content-Type": "application/json",
		"Referer": url,
		"Origin": "https://codesolutions2.github.io",
		"Connection": "keep-alive",
		"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0",
		"Access-Control-Allow-Origin": "*",
	};
	
	var options = { 
		method : "GET",
		mode: 'cors',
		headers: new Headers(headers),
		cache: "no-cache",
		crossorigin: 'anonymous',
		redirect: "follow"
	};
	
	return await fetch(url, options)
		.then(res => res.text())
		.then(str_data => { return str_data; })
		.catch(error => { console.error("error: ", error); });

}

// -----------------------------------------------

async function jQuery_csv_GET(url) {
	
	var headers = {
		"Content-Type": "application/json",
		"Referer": url,
		"Origin": "https://codesolutions2.github.io",
		"Connection": "keep-alive",
		"User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:120.0) Gecko/20100101 Firefox/120.0",
		"Access-Control-Allow-Origin": "*",
	};
	
	var settings = {
		// url: url,
		type : "GET",
		async: true,
		crossDomain: true,
		beforeSend: function(xhr) {xhr.withCredentials = true;},
		// headers: new Headers(headers),
		xhrFields: {responseType: 'text'},
		dataType: 'text',
		success: function(response) { console.log('Success'); },
		error: function(xhr, status, error) { console.error("error: ", error); }
	};
	
	return $.ajax(url, [,settings]).done(function(response) { return response; });

}

// -----------------------------------------------

async function parse_text_to_array(text_str, ys_selected_ColNum, headerORnot) {
	
	var row_arr = text_str.split('\n');

	if (headerORnot == "no_header") {
		row_arr = row_arr.slice(1,row_arr.length-1);
	}
	console.log('row_arr: ', row_arr);
	
	var xs = [];
	var ys = [];
	for (let i=0; i<row_arr.length; i++) {
		var col_arr = row_arr[i].split(',');
		console.log('col_arr: ', col_arr);
		
		var c = 0
		var xs_cols = [];
		var ys_cols = [];
		for (let j=0; j<col_arr.length; j++) {
			
			// Convert strings to number if needed
			var datatype = Number(col_arr[j]) == Number(col_arr[j]) ? Number(col_arr[j]) : String(col_arr[j]);
			// console.log('datatype: ', datatype);
			// console.log('data type [number, string]: ', typeof datatype);
			
			if (j == ys_selected_ColNum[c]) {
				ys_cols.push(datatype);
				c = c + 1;
			} else {
				xs_cols.push(datatype);
			}
		}
		// pack xs and ys
		xs.push(xs_cols);
		ys.push(ys_cols);
	}
	return [xs, ys];
}




</script>
</body>
</html>