<!DOCTYPE html>
<html>
<head></head>
<body>


<button id="run_selection" onclick="run_selection()">Run Selection</button> 

<div id="output">


<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest"></script>

<script>

var gen_model;
var dis_model;


async function run_selection() {

  // Create desired signal.
  // A parabola.
  const n = 20;
  const x = Array.from({length: n}, (v,i) => { return i; }); 
  var X = x.map((v,i) => { return 10+Math.pow(v,2); });

  document.getElementById("output").innerHTML += "X: "+X+"<br>";

  // Create estimated signal.
  // Initialize using random noise.
  var Z = x.map((v,i) => { return 10*Math.random(); });
  
  document.getElementById("output").innerHTML += "Z: "+Z+"<br>";


  // Create generator model.
  gen_model = await generator(n);
  gen_model.compile({optimizer: tf.train.adam(), loss: tf.losses.sigmoidCrossEntropy, metrics: ['acc']});
  
  document.getElementById("output").innerHTML += "gen_model: "+gen_model+"<br>";
 

  // Create discriminator model.
  dis_model = await discriminator(n);
  dis_model.compile({optimizer: tf.train.adam(), loss: tf.losses.sigmoidCrossEntropy, metrics: ['acc']});
}



async function generator(cols) {
  
  // cols - number of features
  const input = tf.input({shape: [cols]});

  const dense0 = tf.layers.dense({units: 64, activation: 'selu'});
  const dense1 = tf.layers.dense({units: 64, activation: 'selu'});
  const dense2 = tf.layers.dense({units: cols});

  const output = dense2.apply(dense1.apply(dense0.apply(input)));

  return tf.model({inputs: input, outputs: output});
}



async function discriminator(cols) {
  
  // cols - number of features
  const input = tf.input({shape: [cols]});

  const dense0 = tf.layers.dense({units: 64, activation: 'selu'});
  const dense1 = tf.layers.dense({units: 64, activation: 'selu'});
  const dense2 = tf.layers.dense({units: cols});

  const output = dense2.apply(dense1.apply(dense0.apply(input)));

  return tf.model({inputs: input, outputs: output});
}


</script>
</body>
</html>