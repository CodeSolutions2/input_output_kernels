tf.keras.applications.VGG19(include_top=False,
                                            input_shape=(224, 224, 3),
                                            weights='imagenet',
                                            input_tensor=input_layer,
                                            classes=1000,
                                            classifier_activation='softmax')
          base_model.trainable = False
          # ----------------------
          # [4] List the layers
          # ----------------------
          # base_model_layers = tf.keras.layers.Lambda(lambda x: base_model(x)) # lambda layers requires an output shape
          # OR
          # base_model_layers_0 = [print(layer.name) for layer in base_model(input_layer)]
          # print('base_model_layers_0: ', base_model_layers_0)
          # Iterating over a symbolic KerasTensor is not supported
          # OR
          base_model_layers_1 = [print(layer.name) for layer in base_model.layers]
          print('base_model_layers_1: ', base_model_layers_1)
          # ----------------------
          # [5] Define two models from the VGG19 model layers
          # ----------------------
          x = base_model(input_layer)
         
          # Original model
          # ----------------------
          # SELECTED_ORG_LAYERS = [('block5_conv4', 1)]
          # outputs = [base_model.get_layer(layer[0]).output for layer in SELECTED_ORG_LAYERS] # acts like a filter
          # OR
          # outputs = tf.keras.layers.Lambda(lambda x: base_model(x)["block5_conv4"])(x)
         
          # model_org = tf.keras.Model(input_layer, outputs)
          # model_org.summary()
         
          # Style model
          # SELECTED_STYLE_LAYERS = [('block1_conv1', 0.2), ('block2_conv1', 0.2), ('block3_conv1', 0.2), ('block4_conv1', 0.2), ('block5_conv1', 0.2)]
          # outputs_style = [vgg.get_layer(layer[0]).output for layer in SELECTED_STYLE_LAYERS] # acts like a filter
          # model_style = tf.keras.Model(inputs, outputs_style)
          # ----------------------
          # [5] Define the cost function for training
          # ----------------------
          # optimizer = tf.keras.optimizers.Adam(learning_rate=0.01)
          # ----------------------
          # [6] Compute the Original image Encoding (a_O)
          # ----------------------
          # org_arr_tf_float =  tf.Variable(tf.image.convert_image_dtype(org_arr_np, tf.float32))
          # x = tf.keras.applications.vgg19.preprocess_input(org_arr_tf_float)
          # a_O = model_org(org_arr_tf_float)
          # ----------------------
          # [7] Compute the Style image Encoding (a_S)
          # ----------------------
          # style_arr_tf_float =  tf.Variable(tf.image.convert_image_dtype(style_arr_np, tf.float32))
          # a_S = model_styl
python|pip install -U tensorflow;
pip install pillow;
pip install numpy;