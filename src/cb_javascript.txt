const tf = require('@tensorflow/tfjs');
// const batch_size = 1;
const timesteps = 1000;
const feature_num = 1;
const input = tf.input({shape: [timesteps, feature_num]});
const lstm0 = tf.layers.lstm({units: 32, activation: 'relu', inputShape: [timesteps, feature_num], returnSequences: true });
const input_lstm0 = lstm0.apply(input);
const lstm1 = tf.layers.lstm({units: 16, activation: 'relu', returnSequences: false });
const input_l0_l1 = lstm1.apply(input_lstm0);
const rv = tf.layers.repeatVector({n: timesteps});
const input_l0_l1_rv = rv.apply(input_l0_l1);
const lstm2 = tf.layers.lstm({units: 16, activation: 'relu', returnSequences: true});
const input_l0_l1_rv_l2 = lstm2.apply(input_l0_l1_rv);
const lstm3 = tf.layers.lstm({units: 32, activation: 'relu', returnSequences: true});
const input_l0_l1_rv_l2_l3 = lstm3.apply(input_l0_l1_rv_l2);
console.log("input_l0_l1_rv_l2_l3 shape: ", JSON.stringify(input_l0_l1_rv_l2_l3.shape));

// returnSequences=false must be set, to reduce timesteps to 1 (i think)
// const dense0 = tf.layers.dense({units: 1000});
// OR
// Apply a dense layer to each of the 1000 timesteps independently.
// If returnSequences=true of the last layer, 1000 timesteps values are returned
const dense0 = tf.layers.timeDistributed({ layer: tf.layers.dense({units: 1}) });
const output = dense0.apply(input_l0_l1_rv_l2_l3);
const model = tf.model({inputs: input, outputs: output});
model.compile({optimizer: tf.train.adam(), loss: tf.losses.meanSquaredError, metrics: ['mse'],});

const Y = Array.from({length: 1000}, (val, ind) => { return 1; });
const n_index = [60, 95, 589, 955];
var X = [];
var c=0;
for (var i=0; i<Y.length; i++) {
  if (n_index.at(c) == i) {
    X.push(c*10);
    c = c + 1;
  } else {
    X.push(Y.at(i));
  }
}
const X_tf = tf.tensor1d(X);
// const Y_tf = tf.tensor1d(Y);
// OR
// const Xcol = X.map((v,i) => { return [v]; });
// const Ycol = Y.map((v,i) => { return [v]; });
// const X_tf = tf.tensor(Xcol);
// const Y_tf = tf.tensor(Ycol);

const history = model.fit(X_tf, X_tf, {epochs: 5});
console.log("history: ", history);
javascript|npm install @tensorflow/tfjs